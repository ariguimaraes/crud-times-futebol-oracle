from pydoc import cli
from model.partidas import Partida
from model.scouts_partidas import Scouts_Partida
from controller.controller_scouts_partida import Controller_Scouts_Partida
from conexion.oracle_queries import OracleQueries
from model.scouts_partidas import get_sk_partida

class Controller_Partida:
    def __init__(self):
        self.ctrl_scouts_partida = Controller_Scouts_Partida()
        
    def inserir_partida(self) -> Partida:
        ''' Ref.: https://cx-oracle.readthedocs.io/en/latest/user_guide/plsql_execution.html#anonymous-pl-sql-blocks'''
        
        oracle = OracleQueries()
        
        self.listar_scouts_partida(oracle, need_connect=True)
        sk_partida = int(input("Digite o número do SK_Partida: "))
        scouts_partida = self.valida_scouts_partida(oracle, sk_partida)
        if scouts_partida == None:
            return None

        cursor = oracle.connect()
        output_value = cursor.var(int)

        partida = dict(codigo_partida=output_value, time_casa=partidas.get_time_casa, time_visitante=partidas.get_time_visitante, gols_pro=partidas.get_gols_pro, gols_contra=partidas.get_gols_contra, arbitro=partidas.get_arbitro, estadio=partidas.get_estadio, sk_partida=scouts_partida.get_sk_partida())
        cursor.execute("""
        begin
            :codigo_partida := PARTIDAS_CODIGO_PARTIDA_SEQ.NEXTVAL;
            insert into partidas values(:sk_partida, :time_casa, :time_visitante, :gols_pro, :gols_contra, :arbitro, :estadio, :sk_partida);
        end;
        """, partida)
        codigo_partida = output_value.getvalue()
        oracle.conn.commit()
        df_partida = oracle.sqlToDataFrame(f"select codigo_partida, time_casa, time_visitante, gols_pro, gols_contra, arbitro, estadio, sk_partida from partidas where codigo_partida = '{codigo_partida}', '{time_casa}', '{time_visitante}', '{gols_pro}', '{gols_contra}', '{arbitro}', '{estadio}', '{sk_partida}'")
        nova_partida = Partida(df_partida.codigo_partida.values[0], df_partida.time_casa.values[0], df_partida.time_visitante.values[0], df_partida.gols_pro.values[0], df_partida.gols_contra.values[0], df_partida.arbitro.values[0], df_partida.estadio.values[0], scouts_partida)
        print(nova_partida.to_string())
        return nova_partida

    def atualizar_partida(self) -> Partida:
        oracle = OracleQueries(can_write=True)
        oracle.connect()

        codigo_partida = int(input("Código da Partida que irá alterar: "))        

        if not self.verifica_existencia_partida(oracle, codigo_partida):

            self.listar_scouts_partida(oracle)
            sk_partida = int(input("Digite o número do SK_Partida: "))
            scouts_partida = self.valida_scouts_partida(oracle, sk_partida)
            if scouts_partida == None:
                return None

            oracle.write(f"update partidas set sk_partida = '{scouts_partida.get_sk_partida()}', time_casa = '{partidas.get_time_casa()}', time_fora = '{partidas.get_time_fora()}',  gols_pro = '{partidas.get_gols_pro()}',  gols_contra = '{partidas.get_gols_contra()}',  arbitro = '{partidas.get_arbitro()}',  estadio = '{partidas.get_estadio()}',  sk_partida = '{scouts_partida.get_sk_partida()}') where codigo_partida = {codigo_partida}")
            df_partida = oracle.sqlToDataFrame(f"select codigo_partida, time_casa, time_visitante, gols_pro, gols_contra, arbitro, estadio, sk_partida from partidas where codigo_partida = '{codigo_partida}', '{time_casa}', '{time_visitante}', '{gols_pro}', '{gols_contra}', '{arbitro}', '{estadio}', '{sk_partida}'")
            partida_atualizado = Partida(df_partida.codigo_partida.values[0], df_partida.time_casa.values[0], df_partida.time_visitante.values[0], df_partida.gols_pro.values[0], df_partida.gols_contra.values[0], df_partida.arbitro.values[0], df_partida.estadio.values[0], scouts_partida)
            print(partida_atualizado.to_string())
            return partida_atualizado
        else:
            print(f"O código {codigo_partida} não existe.")
            return None

    def excluir_partida(self):
        oracle = OracleQueries(can_write=True)
        oracle.connect()

        codigo_partida = int(input("Código da partida que irá excluir: "))        

        if not self.verifica_existencia_partida(oracle, codigo_partida):            
            df_partida = oracle.sqlToDataFrame(f"select codigo_partida, time_casa, time_visitante, gols_pro, gols_contra, arbitro, estadio, sk_partida from partidas where codigo_partida = '{codigo_partida}', '{time_casa}', '{time_visitante}', '{gols_pro}', '{gols_contra}', '{arbitro}', '{estadio}', '{sk_partida}'")
            scouts_partida = self.valida_scouts_partida(oracle, df_partida.sk_partida.values[0])
            
            opcao_excluir = input(f"Tem certeza que deseja excluir o código da partida {codigo_partida} [S ou N]: ")
            if opcao_excluir.lower() == "s":
                print("Atenção, caso a partida possua itens, também serão excluídos!")
                opcao_excluir = input(f"Tem certeza que deseja excluir a partida {codigo_partida} [S ou N]: ")
                if opcao_excluir.lower() == "s":
                    oracle.write(f"delete from scouts_partida where codigo_partida = {codigo_partida}")
                    print("Itens da partida removidos com sucesso!")
                    oracle.write(f"delete from partidas where codigo_partida = {codigo_partida}")
                    partida_excluida = Partida(df_partida.codigo_partida.values[0], df_partida.time_casa.values[0], df_partida.time_visitante.values[0], df_partida.gols_pro.values[0], df_partida.gols_contra.values[0], df_partida.arbitro.values[0], df_partida.estadio.values[0], scouts_partida)
                    print("Partida Removida com Sucesso!")
                    print(partida_excluida.to_string())
        else:
            print(f"O código {codigo_partida} não existe.")

    def verifica_existencia_partida(self, oracle:OracleQueries, codigo:int=None) -> bool:
        df_partida = oracle.sqlToDataFrame(f"select codigo_partida, time_casa, time_visitante, gols_pro, gols_contra, arbitro, estadio, sk_partida from partidas where codigo_partida = '{codigo_partida}', '{time_casa}', '{time_visitante}', '{gols_pro}', '{gols_contra}', '{arbitro}', '{estadio}', '{sk_partida}'")
        return df_partida.empty

    def listar_scouts_partida(self, oracle:OracleQueries, need_connect:bool=False):
        query = """
                select s.sk_partida
                    , s.quantidade
                    , s.cartao_vermelho
                    , s.cartao_amarelo
                    , s.faltas
                    , s.laterais
                    , s.escanteios
                    , s.gols
                    , s.assistencias
                from scouts_partida s
                order by s.quantidade
                """
        if need_connect:
            oracle.connect()
        print(oracle.sqlToDataFrame(query))


    def valida_scouts_partida(self, oracle:OracleQueries, sk_partida:int=None) -> Scouts_Partida:
        if self.ctrl_scouts_partida.verifica_existencia_scouts_partida(oracle, sk_partida):
            print(f"O SK_Partida {sk_partida} informado não existe na base.")
            return None
        else:
            oracle.connect()
            df_scouts_partida = oracle.sqlToDataFrame(f"select sk_partida, quantidade, cartao_vermelho, cartao_amarelo, faltas, laterais, escanteios, gols, assistencias, from scouts_partida where sk_partida = {sk_partida}")
            scouts_partida = Scouts_Partida(df_scouts_partida.sk_partida.values[0], df_scouts_partida.quantidade.values[0], df_scouts_partida.cartao_vermelho.values[0], df_scouts_partida.cartao_amarelo.values[0], df_scouts_partida.faltas.values[0], df_scouts_partida.laterais.values[0], df_scouts_partida.escanteios.values[0], df_scouts_partida.gols.values[0], df_scouts_partida.assistencias.values[0])
            return scouts_partida